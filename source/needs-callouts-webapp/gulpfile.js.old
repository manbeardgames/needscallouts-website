const del = require("del");
const gulp = require("gulp");
const { parallel, series } = require("gulp");
const concat = require("gulp-concat");
const rename = require("gulp-rename");
const sass = require("gulp-sass")(require("sass"));

//  Paths to non-mininified vendor stylesheets.
const vendorStyles = [
    "node_modules/bootstrap/dist/css/bootstrap.css",
    "node_modules/flatpickr/dist/flatpickr.css",
    "node_modules/font-awesome/css/font-awesome.css",
];

//  Paths to minified vendor stylesheets.
const vendorMinStyles = [
    "node_modules/bootstrap/dist/css/bootstrap.min.css",
    "node_modules/flatpickr/dist/flatpickr.min.css",
    "node_modules/font-awesome/css/font-awesome.min.css",
];

//  Additional resources required by vendor styles
const vendorFonts = [
    "node_modules/font-awesome/fonts/fontawesome-webfont.eot",
    "node_modules/font-awesome/fonts/fontawesome-webfont.svg",
    "node_modules/font-awesome/fonts/fontawesome-webfont.ttf",
    "node_modules/font-awesome/fonts/fontawesome-webfont.woff",
    "node_modules/font-awesome/fonts/fontawesome-webfont.woff2",
];

const vendorScripts = [
    "node_modules/bootstrap/dist/js/bootstrap.bundle.js",
    "node_modules/flatpickr/dist/flatpickr.js",
    "node_modules/jquery/dist/jquery.js",
    "node_modules/jquery-validation/dist/jquery.validate.js",
    "node_modules/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.js",
];

const vendorMinScripts = [
    "node_modules/bootstrap/dist/js/bootstrap.bundle.min.js",
    "node_modules/flatpickr/dist/flatpickr.min.js",
    "node_modules/jquery/dist/jquery.min.js",
    "node_modules/jquery-validation/dist/jquery.validate.min.js",
    "node_modules/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js",
];

const siteStyles = ["wwwroot-dev/sass/**/*.scss"];
const siteScripts = ["wwwroot-dev/js/**/*.js"];

//  Builds the non-miified vendor stylesheets by combining all paths found in
//  vendorStyle above and concatinating them into a single file
gulp.task("build-vendor-css", function () {
    return gulp
        .src(vendorStyles)
        .pipe(concat("vendor.css"))
        .pipe(gulp.dest("wwwroot/css"));
});

//  Builds the minified vendor stylesheets by combining all paths found in
//  vendorMinStyles above and concatinating them into a single file
gulp.task("build-vendor-min-css", function () {
    return gulp
        .src(vendorMinStyles)
        .pipe(concat("vendor.min.css"))
        .pipe(gulp.dest("wwwroot/css"));
});

//  Builds the non-miified vendor scripts by combining all paths found in
//  vendorScripts above and concatinating them into a single file
gulp.task("build-vendor-js", function () {
    return gulp
        .src(vendorScripts)
        .pipe(concat("vendor.js"))
        .pipe(gulp.dest("wwwroot/js"));
});

//  Builds the minified vendor scripts by combining all paths found in
//  vendorMinScripts above and concatinating them into a single file
gulp.task("build-vendor-min-js", function () {
    return gulp
        .src(vendorMinScripts)
        .pipe(concat("vendor.min.js"))
        .pipe(gulp.dest("wwwroot/js"));
});

gulp.task(
    "build-scirpts",
    parallel(
        function () {
            return gulp
                .src(vendorScripts)
                .pipe(concat("vendor.js"))
                .pipe(gulp.dest("wwwroot/js"));
        },
        function () {
            return gulp
                .src(vendorMinScripts)
                .pipe(concat("vendor.min.js"))
                .pipe(gulp.dest("wwwroot/js"));
        },
        function () {
            return gulp
                .src(siteScripts)
                .pipe(concat("site.js"))
                .pipe(gulp.dest("wwwroot/js"));
        },
        function () {
            gulp.src(siteScripts);
        }
    )
);

const tasks = [
    "./Gulptasks/site-styles.js",
    "./Gulptasks/vendor-scripts.js",
    "./Gulptasks/vendor-styles.js",
    "./Gulptasks/images.js",
];

//  Load the gulp tasks into the registry
const hub = new HubRegistry(tasks);

//  Register the hub with gulp
gulp.registry(hub);

//  Master build
gulp.task(
    "build",
    parallel("build-site-styles", "build-vendor-styles", "build-vendor-scripts")
);

//  Master clean
gulp.task("clean", function () {
    return del("wwwroot/dist");
});

//  Master rebuild
gulp.task("rebuild", series("clean", "build"));

gulp.task(
    "debug",
    gulp.series(
        //  Bundle all css files and copy to wwwroot
        function () {
            return gulp
                .src(vendorStyles)
                .pipe(concat("vendor.css"))
                .pipe(concat())
                .src(siteStyles)
                .pipe(sass({ outputStyle: "expanded" }))
                .pipe(concat("bundle.css"))
                .pipe(gulp.dest("wwwroot/css"));
        },
        //  Bundle all vendor js files and copy to wwwroot
        function () {
            return gulp
                .src(vendorScripts)
                .pipe(concact("vendor.js"))
                .pipe(gulp.dest("wwwroot/js"));
        },
        //  Compile all site sass files and copy to wwwroot
        function () {
            return gulp
                .src(siteStyles)
                .pipe(sass({ outputStyle: "expanded" }))
                .pipe(rename("site.css"))
                .pipe(gulp.dest("wwwroot/css"));
        }
        //  Copy all site script files to wwwroot
        function () {
            return gulp
        }
    )
);
